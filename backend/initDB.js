const sequelize = require('./config/database');
const { User, Ticket, Comment } = require('./models');
const bcrypt = require('bcryptjs');

async function initializeDatabase() {
  try {
    console.log('üîÑ Starting database initialization with SQLite... - initDB.js:7');
    
    // Test connection
    await sequelize.authenticate();
    console.log('‚úÖ SQLite database connection established - initDB.js:11');

    // Sync all models
    await sequelize.sync({ force: true });
    console.log('‚úÖ Database tables created - initDB.js:15');

    // Create initial admin user
    const hashedPassword = await bcrypt.hash('admin123', 12);
    const adminUser = await User.create({
      email: 'admin@example.com',
      password: hashedPassword,
      name: '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      isAdmin: true
    });

    console.log('‚úÖ Initial admin user created: - initDB.js:26');
    console.log('üìß Email: admin@example.com - initDB.js:27');
    console.log('üîë Password: admin123 - initDB.js:28');

    // Create sample regular user
    const userPassword = await bcrypt.hash('user123', 12);
    const regularUser = await User.create({
      email: 'user@example.com',
      password: userPassword,
      name: '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      isAdmin: false
    });

    console.log('‚úÖ Regular user created: - initDB.js:39');
    console.log('üìß Email: user@example.com - initDB.js:40');
    console.log('üîë Password: user123 - initDB.js:41');

    // Create sample tickets
    const sampleTickets = [
      {
        title: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º',
        description: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 301 —Å 10:00 —É—Ç—Ä–∞. –ü—Ä–æ–ø–∞–¥–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö.',
        department: '–ü–æ–ª—è—Ä–Ω–∞—è –∑–≤–µ–∑–¥–∞',
        authorName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        authorEmail: 'ivan@example.com',
        status: 'open',
        authorId: regularUser.id
      },
      {
        title: '–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ –≤ –ø—Ä–∏–Ω—Ç–µ—Ä–µ',
        description: '–í –ø—Ä–∏–Ω—Ç–µ—Ä–µ HP LaserJet MFP 135a –≤ –æ—Ç–¥–µ–ª–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ç–æ–Ω–µ—Ä. –ù—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –∑–∞–º–µ–Ω–∞.',
        department: '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞', 
        authorName: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        authorEmail: 'maria@example.com',
        status: 'in_progress',
        authorId: regularUser.id
      },
      {
        title: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
        description: '–í –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª–µ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä. –í–æ–∑–¥—É—Ö –Ω–µ –æ—Ö–ª–∞–∂–¥–∞–µ—Ç—Å—è, –Ω–∞ –¥–∏—Å–ø–ª–µ–µ –æ—à–∏–±–∫–∞ E5.',
        department: '–°–æ–∑–≤–µ–∑–¥–∏–µ',
        authorName: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤',
        authorEmail: 'alex@example.com',
        status: 'open',
        authorId: regularUser.id
      },
      {
        title: '–†–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π',
        description: '–í –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ ‚Ññ2 —Å–ª–æ–º–∞–ª—Å—è –º–µ—Ö–∞–Ω–∏–∑–º —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –≤—ã—Å–æ—Ç—ã —É –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—Ä–µ—Å–ª–∞.',
        department: '–°–µ–º–µ–π–Ω—ã–π –¥–æ–º',
        authorName: '–û–ª—å–≥–∞ –ù–∏–∫–æ–ª–∞–µ–≤–∞',
        authorEmail: 'olga@example.com',
        status: 'resolved',
        authorId: regularUser.id
      }
    ];

    const createdTickets = [];
    for (const ticketData of sampleTickets) {
      const ticket = await Ticket.create(ticketData);
      createdTickets.push(ticket);
    }

    console.log('‚úÖ Sample tickets created (4 –∑–∞—è–≤–∫–∏) - initDB.js:89');

    // Create sample comments
    for (const ticket of createdTickets) {
      if (ticket.status !== 'open') {
        await Comment.create({
          content: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ –≤—ã–µ—Ö–∞–ª –Ω–∞ –º–µ—Å—Ç–æ.',
          authorName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          ticketId: ticket.id,
          authorId: adminUser.id
        });

        if (ticket.status === 'resolved') {
          await Comment.create({
            content: '–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞. –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.',
            authorName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            ticketId: ticket.id,
            authorId: adminUser.id
          });
        }
      }
    }

    console.log('‚úÖ Sample comments created - initDB.js:112');
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! - initDB.js:113');
    console.log('üíæ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: database.sqlite - initDB.js:114');
    console.log('\nüìã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: - initDB.js:115');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥: npm run dev - initDB.js:116');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: cd ../frontend && npm start - initDB.js:117');
    console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 - initDB.js:118');
    console.log('\nüë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: - initDB.js:119');
    console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@example.com / admin123 - initDB.js:120');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user@example.com / user123 - initDB.js:121');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Database initialization error: - initDB.js:125', error.message);
    console.error('Full error: - initDB.js:126', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  initializeDatabase();
}

module.exports = initializeDatabase;